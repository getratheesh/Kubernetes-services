trigger: none

pool:
  vmImage: "ubuntu-latest"


variables:  
  AksClusterName: arck-rajesh-prod-001
  AcrName: acrrajesh
  AzureSubscription: AzureServiceConnection # replace with your subscription connection name
  AzureServiceConnectionPayAsYouGo: AzureServiceConnection # replace with your subscription connection name or use $(AzureSubscription) if you only have one
  AzureConnectionType: Azure Resource Manager 
  CertIssuerEmail: ratheesh.kumar@hotmail.com #<your email>  # replace with your email
  CertManagerNamespace: cert-manager 
  DnsLockName: DeleteDns 
  HelmVersion: '3.10.0'
  KedaNamespace: keda
  KedaVersion: 2.4
  Kubernetesversion: '1.25.6'
  KubectlVersion: '1.25.6'
  LokiNamespace: loki-grafana
  NetworkPlugin: azure
  NodeCount: 1
  NginxNamespace: ingress-basic
  ResourceGroupLocation: uaenorth
  ResourceGroupName: rg-rajesh-prod-001  
  TestResourceGroupName: rg-rajesh-test-001  
  SqlServerName: tygoserversql # replace with unique name
  TestSqlServerName: testtygoserversql
  SqlElasticpool: tygoelastic
  TestSqlElasticpool: testtygoelastic

steps:
  - task: HelmInstaller@0
    displayName: Install Helm
    inputs:
      helmVersion: '$(HelmVersion)'
      checkLatestHelmVersion: false
      installKubectl: true
      kubectlVersion: '$(KubectlVersion)'
      checkLatestKubectl: false

  - task: AzureCLI@2
    displayName: "Create resource group"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az group create -g "$(ResourceGroupName)" -l "$(ResourceGroupLocation)"
    enabled: false

  - task: AzureCLI@2
    displayName: "Create Test resource group"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az group create -g "$(TestResourceGroupName)" -l "$(ResourceGroupLocation)"
    enabled: true

  #Create ACR       
  - task: AzureCLI@2
    displayName: "Create Azure Container Registory"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az acr create -g "$(ResourceGroupName)" --name "$(AcrName)" --sku Basic
    enabled: false


  # Create AKS
  - task: AzureCLI@2
    displayName: "Create AKS cluster"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az aks create `
            --resource-group "$(ResourceGroupName)" `
            --location "$(ResourceGroupLocation)"  `
            --name "$(AksClusterName)" `
            --network-plugin $(NetworkPlugin) `
            --kubernetes-version $(KubernetesVersion) `
            --node-vm-size standard_DS2_v2 `
            --node-osdisk-size 0 `
            --node-count $(NodeCount)`
            --load-balancer-sku standard `
            --max-pods 110 `
            --dns-name-prefix microservice-aks-dns `
            --generate-ssh-keys `
            --enable-cluster-autoscaler `
            --min-count 2 `
            --max-count 4 `
            --cluster-autoscaler-profile scale-down-delay-after-add=30s `
            --cluster-autoscaler-profile scale-down-unneeded-time=1m `
            --attach-acr $(AcrName)
    enabled: false

  # Install Cert Manager
  - task: HelmDeploy@0
    displayName: "Install cert manager"
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      command: 'repo'
      arguments: 'add jetstack https://charts.jetstack.io'

  - task: HelmDeploy@0
    displayName: "Install cert manager"
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      command: 'repo'
      arguments: 'update'

  - task: HelmDeploy@0
    displayName: "Install cert manager"
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      namespace: '$(CertManagerNamespace)'
      command: 'upgrade'
      chartType: 'Name'
      chartName: 'jetstack/cert-manager'      
      releaseName: 'cert-manager'
      overrideValues: 'installCRDs=true,inodeSelector.kubernetes\.io/os=linux,webhook.nodeSelector.kubernetes\.io/os"=linux,cainjector.nodeSelector."kubernetes\.io/os"=linux'
      arguments: '--create-namespace'

  # Install Cluster Issuer  
  - task: Kubernetes@1
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscriptionEndpoint: 'AzureServiceConnection'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      command: 'apply'
      useConfigurationFile: true
      configurationType: 'inline'
      inline: |
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: letsencrypt
        spec:
          acme:
            server: https://acme-v02.api.letsencrypt.org/directory
            email: $(CertIssuerEmail)
            privateKeySecretRef:
              name: letsencrypt
            solvers:
            - http01:
                ingress:
                  class: nginx
                  podTemplate:
                    spec:
                      nodeSelector:
                        "kubernetes.io/os": linux
      secretType: 'dockerRegistry'
      containerRegistryType: 'Azure Container Registry'
    displayName: 'Install Cluster Issuer'

  # Install Nginx Ingress Controller  
  - task: HelmDeploy@0
    displayName: "Install ingress-nginx (Helm repo add)"
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      command: 'repo'
      arguments: 'add ingress-nginx https://kubernetes.github.io/ingress-nginx'
  
  - task: HelmDeploy@0
    displayName: "Install ingress-nginx (Helm repo update)"    
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      command: 'repo'
      arguments: 'update'

  - task: HelmDeploy@0
    displayName: "Install ingress-nginx"    
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      command: 'upgrade'
      chartType: 'Name'
      chartName: 'ingress-nginx/ingress-nginx'      
      releaseName: 'ingress-nginx'
      overrideValues: 'controller.replicaCount=2,service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path=/healthz'
      namespace: $(NginxNamespace)
      arguments: '--create-namespace'
    enabled: false

  # Install Loki Grafana
  - task: HelmDeploy@0
    displayName: "Install Loki Grafana (Helm repo add)"
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      command: 'repo'
      arguments: 'add grafana https://grafana.github.io/helm-charts'
    enabled: false

  - task: HelmDeploy@0
    displayName: "Install Loki Grafana (Helm repo update)"
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      command: 'repo'
      arguments: 'update'
    enabled: false

  - task: HelmDeploy@0
    displayName: "Install Loki Grafana"
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      namespace: '$(LokiNamespace)'
      command: 'upgrade'
      chartType: 'Name'
      chartName: 'grafana/loki-stack'
      releaseName: 'loki'
      overrideValues: 'grafana.enabled=true,prometheus.enabled=true,prometheus.alertmanager.persistentVolume.enabled=true,prometheus.server.persistentVolume.enabled=true,loki.persistence.enabled=true,loki.persistence.size=10Gi'
      arguments: '--create-namespace'
    enabled: false

  # Install KEDA
  - task: HelmDeploy@0
    displayName: "Install KEDA (Helm repo add)"
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      command: 'repo'
      arguments: 'add kedacore https://kedacore.github.io/charts'
    enabled: false

  - task: HelmDeploy@0
    displayName: "Install KEDA (Helm repo update)"
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      command: 'repo'
      arguments: 'update'
    enabled: false

  - task: HelmDeploy@0
    displayName: "Install KEDA"
    inputs:
      connectionType: '$(AzureConnectionType)'
      azureSubscription: '$(AzureSubscription)'
      azureResourceGroup: '$(ResourceGroupName)'
      kubernetesCluster: '$(AksClusterName)'
      useClusterAdmin: true
      namespace: '$(KedaNamespace)'
      command: 'upgrade'
      chartType: 'Name'
      chartName: 'kedacore/keda'
      chartVersion: '$(KedaVersion)'
      releaseName: 'keda'
      arguments: '--create-namespace'
    enabled: false

   # Update DNS Records
  - task: AzureCLI@2
    displayName: "Delete CanNotDelete Lock on DNS Zone"
    inputs:
      azureSubscription: '$(AzureServiceConnectionPayAsYouGo)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $dnsId = az lock list --query "[?name=='$(DnsLockName)'].id" -o tsv
        if ($dnsId) 
        {         
          az lock delete --ids $dnsId
        }
    enabled: false

  - task: AzureCLI@2
    displayName: "Get Nginx Ingress public IP"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        $publicIpName = az network public-ip list --query "[?tags.service=='ingress-basic/ingress-nginx-controller'].name" -o tsv        
        $ingressIp = az network public-ip show -g mc_$(ResourceGroupName)_$(AksClusterName)_$(ResourceGroupLocation) -n $publicIpName --query ipAddress
        Write-Host "##vso[task.setvariable variable=IngressIp;]$ingressIp"        
    enabled: false

  - task: AzureCLI@2
    displayName: "Delete existing DNS Records"
    inputs:
      azureSubscription: '$(AzureServiceConnectionPayAsYouGo)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        ForEach ($dnsRecord in $(DnsRecords)) {
          $ipAddress = az network dns record-set a show -g $(ResourceGroupName) -z $(DnsZoneName) --name $dnsRecord -o json --query aRecords[0].ipv4Address 
          if ($ipAddress) 
          {         
            az network dns record-set a remove-record -g $(ResourceGroupName) -z $(DnsZoneName) --record-set-name $dnsRecord --ipv4-address $ipAddress
          }          
        }
    enabled: false

  - task: AzureCLI@2
    displayName: "Set DNS A records"
    inputs:
      azureSubscription: '$(AzureServiceConnectionPayAsYouGo)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        ForEach ($dnsRecord in $(DnsRecords)) {
          az network dns record-set a add-record -g $(ResourceGroupName) -z $(DnsZoneName) -n $dnsRecord -a $(IngressIp)
        }
    enabled: false        

  - task: AzureCLI@2
    displayName: "Create CanNotDelete Lock on DNS Zone"
    inputs:
      azureSubscription: '$(AzureServiceConnectionPayAsYouGo)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az lock create -t CanNotDelete -n $(DnsLockName) -g $(ResourceGroupName) --resource $(DnsZoneName) --resource-type Microsoft.Network/dnszones
    enabled: false
    
  # Create Azure SQL Server
  - task: AzureCLI@2
    displayName: "Create SQL Server"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql server create `
        --location $(ResourceGroupLocation) `
        --resource-group $(ResourceGroupName) `
        --name $(SqlServerName) `
        --admin-user $(SqlServerAdminUser) `
        --admin-password "$(SqlServerAdminPassword)"

    # Create Azure Test SQL Server
  - task: AzureCLI@2
    displayName: "Create Test SQL Server"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql server create `
        --location $(ResourceGroupLocation) `
        --resource-group $(TestResourceGroupName) `
        --name $(TestSqlServerName) `
        --admin-user $(TestSqlServerAdminUser) `
        --admin-password "$(TestSqlServerAdminPassword)"

  - task: AzureCLI@2
    displayName: "Create SQL Server Firewall rule"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |     
        az sql server firewall-rule create `
        --resource-group $(ResourceGroupName) `
        --server $(SqlServerName) `
        --name AllowAzureServices `
        --start-ip-address 0.0.0.0 `
        --end-ip-address 255.255.255.255

  - task: AzureCLI@2
    displayName: "Create Test SQL Server Firewall rule"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |     
        az sql server firewall-rule create `
        --resource-group $(TestResourceGroupName) `
        --server $(TestSqlServerName) `
        --name AllowAzureServices `
        --start-ip-address 0.0.0.0 `
        --end-ip-address 255.255.255.255

  # Create Azure SQL Elastic Pool
  - task: AzureCLI@2
    displayName: "Create SQL Elastic Pool"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql elastic-pool create `
        --name $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --server $(SqlServerName) `
        --edition Standard  `
        --capacity 50 

  # Create Azure Test SQL Elastic Pool
  - task: AzureCLI@2
    displayName: "Create Test SQL Elastic Pool"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql elastic-pool create `
        --name $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --server $(TestSqlServerName) `
        --edition Basic  `
        --capacity 50 


# Create Azure SQL PrepaidCards Database
  - task: AzureCLI@2
    displayName: "Create SQL PrepaidCards Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name Prepaidcards `
        --server $(SqlServerName)

# Create Azure Test SQL PrepaidCards Database
  - task: AzureCLI@2
    displayName: "Create SQL PrepaidCards Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Prepaidcards `
        --server $(TestSqlServerName)

# Create Azure SQL Accounts Database
  - task: AzureCLI@2
    displayName: "Create SQL Accounts Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name Accounts `
        --server $(SqlServerName)

# Create Azure Test SQL Accounts Database
  - task: AzureCLI@2
    displayName: "Create Test SQL Accounts Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Accounts `
        --server $(TestSqlServerName)

# Create Azure SQL Payments Database
  - task: AzureCLI@2
    displayName: "Create SQL Payments Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name Payments `
        --server $(SqlServerName)

# Create Azure Test SQL Payments Database
  - task: AzureCLI@2
    displayName: "Create Test SQL Payments Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Payments `
        --server $(TestSqlServerName)

# Create Azure SQL Providers Database
  - task: AzureCLI@2
    displayName: "Create SQL Providers Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name Providers `
        --server $(SqlServerName)

# Create Azure Test SQL Providers Database
  - task: AzureCLI@2
    displayName: "Create Test SQL Providers Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Providers `
        --server $(TestSqlServerName)

# Create Azure Test SQL Channels Database
  - task: AzureCLI@2
    displayName: "Create Test SQL Channels Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Channels `
        --server $(TestSqlServerName)

# Create Azure  SQL Channels Database
  - task: AzureCLI@2
    displayName: "Create  SQL Channels Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name Channels `
        --server $(SqlServerName)

# Create Azure SQL ESIM Database
  - task: AzureCLI@2
    displayName: "Create SQL ESIM Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name ESIM `
        --server $(SqlServerName)

# Create Azure Test SQL ESIM Database
  - task: AzureCLI@2
    displayName: "Create Test SQL ESIM Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name ESIM `
        --server $(TestSqlServerName)

# Create Azure SQL Notifications Database
  - task: AzureCLI@2
    displayName: "Create SQL Notifications Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name Notifications `
        --server $(SqlServerName)

# Create Azure Test SQL Notifications Database
  - task: AzureCLI@2
    displayName: "Create Test SQL Notifications Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Notifications `
        --server $(TestSqlServerName)

# Create Azure SQL SIM Database
  - task: AzureCLI@2
    displayName: "Create SQL SIM Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name Sim `
        --server $(SqlServerName)

# Create Azure Test SQL SIM Database
  - task: AzureCLI@2
    displayName: "Create Test SQL SIM Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Sim `
        --server $(TestSqlServerName)

# Create Azure SQL Reviews Database
  - task: AzureCLI@2
    displayName: "Create SQL Reviews Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name Reviews `
        --server $(SqlServerName)

# Create Azure Test SQL Reviews Database
  - task: AzureCLI@2
    displayName: "Create Test SQL Reviews Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Reviews `
        --server $(TestSqlServerName)

# Create Azure SQL Redbull Database
  - task: AzureCLI@2
    displayName: "Create SQL Redbull Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name Redbull `
        --server $(SqlServerName)

# Create Azure Test SQL Redbull Database
  - task: AzureCLI@2
    displayName: "Create Test SQL Redbull Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Redbull `
        --server $(TestSqlServerName)

# Create Azure SQL Salam Database
  - task: AzureCLI@2
    displayName: "Create SQL Salam Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name Salam `
        --server $(SqlServerName)

# Create Azure Test SQL Salam Database
  - task: AzureCLI@2
    displayName: "Create Test SQL Salam Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Salam `
        --server $(TestSqlServerName)

# Create Azure SQL AI Database
  - task: AzureCLI@2
    displayName: "Create SQL AI Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(SqlElasticpool) `
        --resource-group $(ResourceGroupName) `
        --name AI `
        --server $(SqlServerName)

# Create Azure Test SQL AI Database
  - task: AzureCLI@2
    displayName: "Create Test SQL AI Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name AI `
        --server $(TestSqlServerName)
        
# Create Azure Test SQL Identity Database
  - task: AzureCLI@2
    displayName: "Create Test SQL Identity Database"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az sql db create `
        --elastic-pool $(TestSqlElasticpool) `
        --resource-group $(TestResourceGroupName) `
        --name Identity `
        --server $(TestSqlServerName)
        

